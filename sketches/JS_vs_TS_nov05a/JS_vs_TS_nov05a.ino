#include "arduino_secrets.h"
/*
  Sketch generated by the Arduino IoT Cloud Thing "JS_vs_TS"
  https://create.arduino.cc/cloud/things/YOUR_THING_ID

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float jsPercentage;
  float tsPercentage;
  int buttonPushCounterJS;
  int buttonPushCounterTS;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

#define BUTTON_PIN_JS 4
#define BUTTON_PIN_TS 5
#define BUZZER_PIN 6
#define ONBOARD_LED  13

int buttonStateJS = 0;
int buttonStateTS = 0;
int lastButtonStateJS = 0;
int lastButtonStateTS = 0;
bool isConnectedToCloud = false;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);

  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(4);
  ArduinoCloud.printDebugInfo();

  pinMode(BUTTON_PIN_JS, INPUT);
  pinMode(BUTTON_PIN_TS, INPUT);
  pinMode(BUZZER_PIN, OUTPUT);
  pinMode(ONBOARD_LED, OUTPUT);

  tone(BUZZER_PIN, 440, 100);
  tone(BUZZER_PIN, 2 * 440, 100);

  digitalWrite(ONBOARD_LED, HIGH);

}

void loop() {
  ArduinoCloud.update();

  if (!isConnectedToCloud) {
    if (ArduinoCloud.connected()) {
      digitalWrite(ONBOARD_LED, LOW);
      tone(BUZZER_PIN, 3 * 440, 100);
      delay(100);
      tone(BUZZER_PIN, 2 * 440, 100);
      isConnectedToCloud = true;
    }
  }

  buttonStateJS = digitalRead(BUTTON_PIN_JS);
  buttonStateTS = digitalRead(BUTTON_PIN_TS);
  if (buttonStateJS != lastButtonStateJS) {
    if (buttonStateJS == HIGH) {
      // if the current state is HIGH then the button went from off to on
      digitalWrite(ONBOARD_LED, HIGH);
      buttonPushCounterJS++;
      Serial.print("ON: number of button pushes JS: ");
      Serial.println(buttonPushCounterJS);
      tone(BUZZER_PIN, 400, 200);
      updatePercentages(buttonPushCounterJS, buttonPushCounterTS);
    } else {
      Serial.println("OFF JS");
    }
  }
  if (buttonStateTS != lastButtonStateTS) {
    if (buttonStateTS == HIGH) {
      digitalWrite(ONBOARD_LED, HIGH);
      // if the current state is HIGH then the button went from off to on
      buttonPushCounterTS++;
      Serial.print("ON: number of button pushes TS: ");
      Serial.println(buttonPushCounterTS);
      tone(BUZZER_PIN, 800, 200);
      updatePercentages(buttonPushCounterJS, buttonPushCounterTS);
    } else {
      Serial.println("OFF TS");
    }
  }

  delay(50);
  lastButtonStateJS = buttonStateJS;
  lastButtonStateTS = buttonStateTS;
  digitalWrite(ONBOARD_LED, LOW);
}

void updatePercentages(int buttonPushCounterJS, int buttonPushCounterTS) {
  if (buttonPushCounterJS + buttonPushCounterTS > 0) {
    jsPercentage = float(buttonPushCounterJS) / (buttonPushCounterJS + buttonPushCounterTS) * 100;
    tsPercentage = float(buttonPushCounterTS) / (buttonPushCounterJS + buttonPushCounterTS) * 100;
  } else {
    jsPercentage = tsPercentage = 0.0;
  }
  Serial.print("JS%: ");
  Serial.println(jsPercentage);
  Serial.print("TS%: ");
  Serial.println(tsPercentage);
}

/*
  Since ButtonPushCounterJS is READ_WRITE variable, onButtonPushCounterJSChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onButtonPushCounterJSChange()  {
  // Add your code here to act upon ButtonPushCounterJS change
  tone(BUZZER_PIN, 440, 500);
  updatePercentages(buttonPushCounterJS, buttonPushCounterTS);
}

/*
  Since ButtonPushCounterTS is READ_WRITE variable, onButtonPushCounterTSChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onButtonPushCounterTSChange()  {
  // Add your code here to act upon ButtonPushCounterTS change
  tone(BUZZER_PIN, 2 * 440, 500);
  updatePercentages(buttonPushCounterJS, buttonPushCounterTS);
}




/*
  Since TsPercentage is READ_WRITE variable, onTsPercentageChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTsPercentageChange()  {
  // Add your code here to act upon TsPercentage change
}


/*
  Since JsPercentage is READ_WRITE variable, onJsPercentageChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onJsPercentageChange()  {
  // Add your code here to act upon JsPercentage change
}

